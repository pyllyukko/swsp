/*
 * this is roughly how this script works:
 *
 *   - perform a bunch of sanity checks
 *   - detect the Slackware version and architecture in use
 *   - fetch the patches/FILE_LIST		file from $MAIN_MIRROR FTP
 *   - fetch the patches/CHECKSUMS.md5		file from $MAIN_MIRROR FTP
 *   - fetch the patches/CHECKSUMS.md5.asc	file from $MAIN_MIRROR FTP
 *   - verify the PGP signature of	CHECKSUMS.md5
 *   - verify the FILE_LIST MD5 from	CHECKSUMS.md5
 *   - at this point we should be confident that the patch list is authentic
 *   - read all available packages from FILE_LIST into $PACKAGES[] array
 *
 *   - go through the $PACKAGES[] array:
 *     - check if the package in question is installed on the local system
 *     - if $SELECT_UPDATES_INDIVIDUALLY is 1, let user choose whether to add
 *       the package to the $UPDATES[] array
 *     - go through the $UPDATE_BLACKLIST[] array to see if we should skip this
 *       patch
 *     - verify the slackware version tag in the package's revision field is
 *       correct, if available at all that is
 *     - if SKIP_VERSION_TEST is 0, perform version comparison against the
 *       currently installed versions with version_checker() and
 *       do_version_check() functions
 *       - if versions are the same, compare the revisions
 *     - if SKIP_VERSION_TEST is 1, just compare whether the versions are
 *       exactly same
 *   - add suitable packages to the $UPDATES[] array
 *   - print a brief summary about the packages in the $UPDATES[] array
 *
 *   - start processing the $UPDATES[] array:
 *     - try to fetch the SSA ID for the patch from www.slackware.com
 *     - check if the patch is a kernel upgrade, so we can notify the user that
 *       it needs some manual work
 *     - try all the $MIRRORS[] until the package and it's PGP signature file
 *       are downloaded
 *     - verify the package's MD5 from CHECKSUMS.md5 (note that CHECKSUMS.md5
 *       itself should already be verified at this point, also see
 *       $CHECKSUMS_VERIFIED variable)
 *     - verify the package's PGP signature
 *     - run upgradepkg with --dry-run first and the the real deal
 *     - if everything went well, add the applied patch to $UPGRADED_PACKAGES[]
 *       array, otherwise to the $FAILED_PACKAGES[] array
 *
 *   ... to be continued
 */
digraph {
  start[shape="box", style=rounded];
  end[shape="box", style=rounded];
  fetch_FILE_LIST[shape="box", style=rounded];
  verify_checksums[shape="box", style=rounded];
  //verify_file_list[shape="box", style=rounded];
  md5_verified[shape="diamond", style=""];
  package_md5_verified[shape="diamond", style=""];
  package_pgp_verified[shape="diamond", style=""];
  package_ok[shape="box", style=rounded];
  pgp_verified[shape="diamond", style=""];
  fail[shape="box", style=rounded];
  parse_updates[shape="box", style=rounded];
  any_packages_found[shape="diamond", style=""];
  process_packages[shape="box", style=rounded];
  next_package[shape="diamond", style=""];
  is_package_installed[shape="diamond", style=""];
  is_package_blacklisted[shape="diamond", style=""];
  is_package_newer[shape="diamond", style=""];
  add_to_update_list[shape="box", style=rounded];
  updates_left_on_the_list[shape="diamond", style=""];
  upgrade_package_from_mirror[shape="box", style=rounded];
  next_mirror[shape="diamond", style=""];
  package_upgrade_failed[shape="box", style=rounded];
  fetch_package[shape="box", style=rounded];
  download_success[shape="diamond", style=""];
  dry_run[shape="diamond", style=""];
  upgradepkg[shape="diamond", style=""];
  package_upgraded[shape="box", style=rounded];

  start -> fetch_FILE_LIST;
  subgraph cluster0 {
    label="Download and verify FILE_LIST"

    fetch_FILE_LIST -> verify_checksums;
    verify_checksums -> pgp_verified;
    pgp_verified -> md5_verified[label="Yes"];
  }
  pgp_verified -> fail[label="No"];
  /*
  pgp_verified -> verify_file_list[label="Yes"];
  verify_file_list -> md5_verified;
  */
  md5_verified -> fail[label="No (RET_FAILED)"];
  fail -> end;

  subgraph cluster1 {
    md5_verified -> parse_updates[label="Yes"];
    parse_updates -> any_packages_found;
    any_packages_found -> process_packages[label="Yes"];
  }
  any_packages_found -> end[label="No"];
  process_packages -> next_package[label="Yes"];

  subgraph cluster2 {
    label="Process available packages";
    next_package -> is_package_installed[label="Yes"];
    is_package_installed -> next_package[label="No"];
    is_package_installed -> is_package_blacklisted[label="Yes"];
    is_package_blacklisted -> is_package_newer[label="No"];
    is_package_blacklisted -> next_package[label="Yes"];
    is_package_newer -> next_package[label="No"];
    is_package_newer -> add_to_update_list[label="Yes"];
  }
  add_to_update_list -> next_package;
  updates_left_on_the_list -> upgrade_package_from_mirror[label="Yes"];
  updates_left_on_the_list -> end[label="No"];
  next_package -> updates_left_on_the_list[label="No"];

  upgrade_package_from_mirror -> next_mirror;
  next_mirror -> fetch_package[label="Yes"];
  next_mirror -> package_upgrade_failed[label="No"];
  fetch_package -> download_success;
  download_success -> next_mirror[label="No"];
  download_success -> package_md5_verified[label="Yes"];
  package_md5_verified -> package_pgp_verified[label="Yes"];
  package_pgp_verified -> package_ok[label="Yes"];
  package_ok -> dry_run;
  dry_run -> upgradepkg[label="Yes"];
  upgradepkg -> package_upgraded[label="Yes"];

  upgradepkg -> package_upgrade_failed[label="No"];
  package_upgraded -> updates_left_on_the_list[label="RET_OK"];
  package_upgrade_failed -> updates_left_on_the_list[label="RET_FAILED"];

  start[label="security_update()"];
  end[label="End"];
  fetch_FILE_LIST[label="Fetch FILE_LIST, CHECKSUMS.md5 & CHECKSUMS.md5.asc"];
  verify_checksums[label="Verify CHECKSUMS.md5 with PGP"];
  //verify_file_list[label="Verify FILE_LIST's MD5"];
  md5_verified[label="MD5 successfully verified?"];
  pgp_verified[label="PGP signature successfully verified?"];
  fail[label="Can't upgrade any packages"];
  parse_updates[label="Parse available patches from FILE_LIST"];
  any_packages_found[label="Packages found?"];
  process_packages[label="Process packages"];
  next_package[label="Packages left in the list?"];
  is_package_installed[label="Is the package installed locally?"];
  is_package_blacklisted[label="Is the package blacklisted for upgrade?"];
  is_package_newer[label="Is the available patch newer than local?"];
  add_to_update_list[label="Add to updates list"];
  updates_left_on_the_list[label="Updates left on the list?"];
  upgrade_package_from_mirror[label="upgrade_package_from_mirror()"];
  package_upgrade_failed[label="Package could not be upgraded"];
  next_mirror[label="Mirrors left?"];
  fetch_package[label="Fetch package"];
  download_success[label="Download succeeded"];
  package_md5_verified[label="Package's MD5 verified"];
  package_pgp_verified[label="Package's PGP signature verified"];
  package_ok[label="Package OK"];
  dry_run[label="Dry-run succeeded?"];
  upgradepkg[label="Upgradepkg succeeded?"];
  package_upgraded[label="Package upgraded"];
}
